package protocol

import (
    "io"
    "fmt"
)

// codegen: modify for debug only

type Packet interface {
    Read(reader io.Reader) error
    Write(writer io.Writer) (int, error)
}

// ReadFrontend switches on frontend packet identifiers and returns the matching packet
// DO NOT call this function if the packet in queue does not have an identifier
func ReadFrontend(reader io.Reader) (packet Packet, err error) {
    var identifier byte
    identifier, err = ReadByte(reader)
    if err != nil {
        return
    }

    switch identifier {
        {{range $name, $packet := .FrontEnd -}}
            {{if $packet.Identifier -}}
                case byte('{{$packet.Identifier}}'):
                    packet = new({{$name}})
            {{end -}}
        {{end -}}
        default:
            err = fmt.Errorf("no such packet with identifier 0x%x in Frontend", identifier)
            return
    }

    err = packet.Read(reader)
    if err != nil {
        return
    }

    return
}

// ReadBackend switches on backend packet identifier and returns the matching packet
// DO NOT call this function if the packet in queue does not have an identifier
func ReadBackend(reader io.Reader) (packet Packet, err error) {
    var identifier byte
    identifier, err = ReadByte(reader)
    if err != nil {
        return
    }

    switch identifier {
        {{range $name, $packet := .BackEnd -}}
            {{if $packet.Identifier -}}
                case byte('{{$packet.Identifier}}'):
                    packet = new({{$name}})
            {{end -}}
        {{end -}}
        default:
            err = fmt.Errorf("no such packet with identifier 0x%x in Backend", identifier)
            return
    }

    err = packet.Read(reader)
    if err != nil {
        return
    }

    return
}
